generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chatbot {
  id            String         @id @default(cuid())
  userId        String
  name          String
  systemPrompt  String?        @db.Text
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  Document      Document[]
  mode          PromptMode     @default(STRICT) // Yeni alan
}
enum PromptMode {
  STRICT   // sadece belge
  FLEXIBLE // belge + genel bilgi
}

// NextAuth.js iÃ§in gerekli standart modeller
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  role               Role           @default(USER)
  plan               Plan           @default(FREE)
  onboardingComplete Boolean        @default(false)
  accounts           Account[]
  sessions           Session[]
  documents          Document[]
  conversations      Conversation[] // YENÄ°: KullanÄ±cÄ±nÄ±n konuÅŸmalarÄ± iliÅŸkisi
  Chatbot            Chatbot[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Bizim kendi modelimiz
model Conversation {
  id        String   @id @default(cuid())
  userId    String
  chatbotId String // KonuÅŸmanÄ±n hangi chatbot'a ait olduÄŸu
  title     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages  Json
}

enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  PRO
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  chatbotId String // ðŸ†• Bu satÄ±rÄ± ekle
  content   String   @db.Text
  embedding Float[]
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade) // ðŸ†• bu satÄ±r
}
