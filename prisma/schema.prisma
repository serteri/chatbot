generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Organization {
  id       String    @id @default(cuid())
  name     String
  chatbots Chatbot[]
  users    User[]
}

model Chatbot {
  id                 String               @id @default(cuid())
  userId             String
  organizationId     String?
  name               String
  systemPrompt       String?
  mode               PromptMode           @default(STRICT)
  isPublic           Boolean              @default(false)
  storeConversations Boolean              @default(false)
  retentionDays      Int?
  embedAllowlist     String[]             @default([])
  createdAt          DateTime             @default(now())
  organization       Organization?        @relation(fields: [organizationId], references: [id])
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations      Conversation[]
  documents          Document[]
  PublicConversation PublicConversation[]

  @@index([userId, organizationId])
  @@index([organizationId, isPublic])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  role               Role           @default(USER)
  plan               Plan           @default(FREE)
  trialEndsAt        DateTime? // Deneme süresinin ne zaman biteceği (opsiyonel)
  onboardingComplete Boolean        @default(false)
  organizationId     String?
  accounts           Account[]
  chatbots           Chatbot[]
  conversations      Conversation[]
  documents          Document[]
  sessions           Session[]
  Organization       Organization?  @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  chatbotId String
  title     String
  createdAt DateTime @default(now())
  messages  Json
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Document {
  id           String                 @id @default(cuid())
  userId       String
  chatbotId    String
  content      String
  embedding    Float[]                @default([])
  embeddingVec Unsupported("vector")?
  fileName     String?
  mimeType     String?
  chunkIndex   Int?
  chunkCount   Int?
  createdAt    DateTime               @default(now())
  chatbot      Chatbot                @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt    DateTime               @updatedAt

  @@index([userId, chatbotId, fileName])
}

model BotTemplate {
  id           String @id @default(cuid())
  name         String
  systemPrompt String
}

model PublicConversation {
  id             String   @id @default(cuid())
  chatbotId      String
  organizationId String?
  visitorId      String?
  externalUserId String?
  messages       Json
  createdAt      DateTime @default(now())
  chatbot        Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([chatbotId, createdAt])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum PromptMode {
  STRICT
  FLEXIBLE
}

enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}
